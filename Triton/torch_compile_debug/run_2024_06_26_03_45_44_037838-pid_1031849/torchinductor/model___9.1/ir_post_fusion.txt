buf2: ExternKernelSchedulerNode(RandomSeeds)
buf2.writes = [StarDep(name='buf2')]
buf2.unmet_dependencies = []
buf2.met_dependencies = []
buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False, is_weak=False)]
buf2.node.kernel = aten.randint.low_out


buf0_buf1_buf3_buf4: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
buf0_buf1_buf3_buf4.writes = 
    [   MemoryDep('buf0', c0, {c0: 196608}),
        MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf3', c0, {c0: 25165824}),
        MemoryDep('buf4', c0, {c0: 25165824})]
buf0_buf1_buf3_buf4.unmet_dependencies = [MemoryDep('buf2', 0, {})]
buf0_buf1_buf3_buf4.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 25165824})]
buf0_buf1_buf3_buf4.users = []
    buf0_buf1_buf3_buf4.snodes[0] =
    buf0: SchedulerNode(ComputedBuffer)
    buf0.writes = [MemoryDep('buf0', c0, {c0: 196608})]
    buf0.unmet_dependencies = []
    buf0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 25165824})]
    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
    buf0.group.device = cuda:0
    buf0.group.iteration = (196608, 128)
    buf0.sizes = ([196608], [128])
    class buf0_loop_body:
        var_ranges = {z0: 196608, z1: 128}
        index0 = 128*z0 + z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('arg0_1', get_index)
            to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'max', to_dtype)
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf0', get_index_1, reduction)
            return store_reduction
    buf0_buf1_buf3_buf4.snodes[1] =
    buf1: SchedulerNode(ComputedBuffer)
    buf1.writes = [MemoryDep('buf1', c0, {c0: 196608})]
    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 196608})]
    buf1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 25165824})]
    buf1.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
    buf1.group.device = cuda:0
    buf1.group.iteration = (196608, 128)
    buf1.sizes = ([196608], [128])
    class buf1_loop_body:
        var_ranges = {z0: 196608, z1: 128}
        index0 = 128*z0 + z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('arg0_1', get_index)
            to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf0', get_index_1)
            sub = ops.sub(to_dtype, load_1)
            exp = ops.exp(sub)
            reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
            get_index_2 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf1', get_index_2, reduction)
            return store_reduction
    buf0_buf1_buf3_buf4.snodes[2] =
    buf3: SchedulerNode(ComputedBuffer)
    buf3.writes = [MemoryDep('buf3', c0, {c0: 25165824})]
    buf3.unmet_dependencies = [MemoryDep('buf2', 0, {})]
    buf3.met_dependencies = []
    buf3.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False)]
    buf3.group.device = cuda:0
    buf3.group.iteration = (25165824, 1)
    buf3.sizes = ([25165824], [])
    class buf3_loop_body:
        var_ranges = {z0: 25165824}
        index0 = z0
        def body(self, ops):
            load_seed = ops.load_seed('buf2', 0)
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int32)
            rand = ops.rand(load_seed, index_expr)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf3', get_index_1, rand, None)
            return store
    buf0_buf1_buf3_buf4.snodes[3] =
    buf4: SchedulerNode(ComputedBuffer)
    buf4.writes = [MemoryDep('buf4', c0, {c0: 25165824})]
    buf4.unmet_dependencies = 
        [   MemoryDep('buf0', c0, {c0: 196608}),
            MemoryDep('buf1', c0, {c0: 196608}),
            MemoryDep('buf3', c0, {c0: 25165824})]
    buf4.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 25165824})]
    buf4.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf4.group.device = cuda:0
    buf4.group.iteration = (25165824, 1)
    buf4.sizes = ([196608, 128], [])
    class buf4_loop_body:
        var_ranges = {z0: 196608, z1: 128}
        index0 = 128*z0 + z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf3', get_index)
            to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
            constant = ops.constant(0.2, torch.float16)
            gt = ops.gt(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('arg0_1', get_index_1)
            to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf0', get_index_2)
            sub = ops.sub(to_dtype_2, load_2)
            exp = ops.exp(sub)
            get_index_3 = self.get_index('index1')
            load_3 = ops.load('buf1', get_index_3)
            truediv = ops.truediv(exp, load_3)
            to_dtype_3 = ops.to_dtype(truediv, torch.float16, src_dtype = torch.float32)
            mul = ops.mul(to_dtype_1, to_dtype_3)
            constant_1 = ops.constant(1.25, torch.float16)
            mul_1 = ops.mul(mul, constant_1)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf4', get_index_4, mul_1, None)
            return store


